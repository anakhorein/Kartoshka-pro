import Foundation

/// –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
/// 
/// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö,
/// –æ—Ç–≤–µ—Ç–∞—Ö –∏ –æ—à–∏–±–∫–∞—Ö. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (DEBUG).
class NetworkLogger {
    // MARK: - Constants
    
    /// –≠–º–æ–¥–∑–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    private static let requestEmoji = "üì§"
    
    /// –≠–º–æ–¥–∑–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    private static let responseEmoji = "üì•"
    
    /// –≠–º–æ–¥–∑–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    private static let errorEmoji = "‚ùå"
    
    /// –≠–º–æ–¥–∑–∏ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    private static let successEmoji = "‚úÖ"
    
    /// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
    private static let separator = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    // MARK: - Public Methods
    
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    /// - Parameter request: URLRequest –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    /// - Note: –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä—É–µ—Ç URL, –º–µ—Ç–æ–¥, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    static func logRequest(_ request: URLRequest) {
        #if DEBUG
        print("\n\(separator)")
        print("\(requestEmoji) Network Request")
        print("\(separator)")
        
        // URL
        if let url = request.url?.absoluteString {
            print("üìç URL: \(url)")
        }
        
        // Method
        if let method = request.httpMethod {
            print("üìù Method: \(method)")
        }
        
        // Headers
        if let headers = request.allHTTPHeaderFields, !headers.isEmpty {
            print("üìã Headers:")
            headers.forEach { key, value in
                print("   ‚Ä¢ \(key): \(value)")
            }
        }
        
        // Body
        if let body = request.httpBody,
           let bodyString = String(data: body, encoding: .utf8) {
            print("üì¶ Body:")
            print(bodyString)
        }
        
        print("\(separator)\n")
        #endif
    }
    
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤–æ–º –æ—Ç–≤–µ—Ç–µ
    /// - Parameters:
    ///   - response: URLResponse –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    ///   - data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    ///   - error: –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
    /// - Note: –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–¥, –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—à–∏–±–∫–∏
    static func logResponse(_ response: URLResponse?, data: Data?, error: Error?) {
        #if DEBUG
        print("\n\(separator)")
        print("\(responseEmoji) Network Response")
        print("\(separator)")
        
        // Status Code
        if let httpResponse = response as? HTTPURLResponse {
            let statusEmoji = (200...299).contains(httpResponse.statusCode) ? successEmoji : errorEmoji
            print("\(statusEmoji) Status: \(httpResponse.statusCode)")
            
            // Headers
            if !httpResponse.allHeaderFields.isEmpty {
                print("üìã Headers:")
                httpResponse.allHeaderFields.forEach { key, value in
                    print("   ‚Ä¢ \(key): \(value)")
                }
            }
        }
        
        // Response Body
        if let data = data {
            print("üì¶ Response Body:")
            if let jsonObject = try? JSONSerialization.jsonObject(with: data),
               let prettyData = try? JSONSerialization.data(withJSONObject: jsonObject, options: .prettyPrinted),
               let prettyString = String(data: prettyData, encoding: String.Encoding.utf8) {
                print(prettyString)
            } else if let string = String(data: data, encoding: String.Encoding.utf8) {
                print(string)
            }
        }
        
        // Error
        if let error = error {
            print("\(errorEmoji) Error: \(error.localizedDescription)")
        }
        
        print("\(separator)\n")
        #endif
    }
} 