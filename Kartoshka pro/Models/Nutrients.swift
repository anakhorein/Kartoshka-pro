import Foundation

/// Структура, представляющая информацию о питательном веществе
///
/// Эта структура содержит основную информацию о питательном веществе, такую как его идентификатор,
/// название, номер и единицы измерения.
///
/// ## Пример использования
/// ```swift
/// let nutrient = Nutrient(id: "1001", name: "Белок", nutrient_nbr: "203", rank: "1", unit_name: "г")
/// print(nutrient.name) // Выведет: "Белок"
/// ```
///
/// ## Важные замечания
/// - Структура поддерживает кодирование и декодирование (Codable)
/// - Реализует протоколы Identifiable и Hashable для использования в SwiftUI
/// - Все поля являются обязательными
struct Nutrient: Codable, Identifiable, Hashable {
    /// Уникальный идентификатор питательного вещества
    ///
    /// Используется для однозначной идентификации питательного вещества в системе
    let id: String
    
    /// Название питательного вещества
    ///
    /// Полное название питательного вещества на русском языке
    let name: String
    
    /// Номер питательного вещества в системе классификации
    ///
    /// Уникальный номер, используемый в системе классификации питательных веществ
    let nutrient_nbr: String
    
    /// Ранг питательного вещества
    ///
    /// Определяет порядок отображения питательного вещества в интерфейсе
    let rank: String
    
    /// Единица измерения питательного вещества
    ///
    /// Стандартная единица измерения (например, г, мг, мкг)
    let unit_name: String
}

/// Структура, представляющая коллекцию питательных веществ
///
/// Эта структура используется для декодирования JSON-ответа, содержащего массив питательных веществ.
///
/// ## Пример использования
/// ```swift
/// let nutrients = Nutrients(nutrient: [nutrient1, nutrient2])
/// for nutrient in nutrients.nutrient {
///     print(nutrient.name)
/// }
/// ```
struct Nutrients: Codable {
    /// Массив питательных веществ
    ///
    /// Содержит список всех питательных веществ в системе
    let nutrient: [Nutrient]
}

/// Структура, представляющая информацию о питательном веществе в контексте конкретного продукта
///
/// Эта структура содержит детальную информацию о количестве и характеристиках питательного вещества
/// в конкретном продукте питания.
///
/// ## Пример использования
/// ```swift
/// let foodNutrient = FoodItemNutrient(
///     amount: 10.5,
///     fdc_id: 12345,
///     nutrient_id: 1001
/// )
/// ```
///
/// ## Важные замечания
/// - Большинство полей являются опциональными, так как не все продукты содержат полную информацию
/// - Структура используется для хранения данных из базы FoodData Central
/// - Поддерживает кодирование и декодирование для работы с JSON
struct FoodItemNutrient: Codable {
    /// Количество питательного вещества
    let amount: Float?
    /// Код питательного вещества
    let code: String?
    /// Количество точек данных
    let data_points: Int?
    /// Идентификатор метода получения данных
    let derivation_id: Int?
    /// Описание питательного вещества
    let description: String?
    /// Идентификатор продукта в базе данных
    let fdc_id: Int
    /// Примечание к питательному веществу
    let footnote: String?
    /// Уникальный идентификатор записи
    let id: Int?
    /// Максимальное значение
    let max: Float?
    /// Медианное значение
    let median: Float?
    /// Минимальное значение
    let min: Float?
    /// Год получения минимального значения
    let min_year_acquired: Int?
    /// Название питательного вещества
    let name: String?
    /// Описание в национальной системе
    let ns_description: String?
    /// Идентификатор питательного вещества
    let nutrient_id: Int?
    /// Номер питательного вещества
    let nutrient_nbr: String?
    /// Ранг питательного вещества
    let rank: Int?
    /// Идентификатор источника данных
    let source_id: Int?
    /// Единица измерения
    let unit_name: String?
} 